// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lenet5_CONVOLUTION_LAYER_1_Pipeline_copy_input_2_copy_input_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        IBRAM_address0,
        IBRAM_ce0,
        IBRAM_we0,
        IBRAM_d0,
        input_layer_address0,
        input_layer_ce0,
        input_layer_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] IBRAM_address0;
output   IBRAM_ce0;
output   IBRAM_we0;
output  [31:0] IBRAM_d0;
output  [9:0] input_layer_address0;
output   input_layer_ce0;
input  [31:0] input_layer_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_100_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln40_1_fu_168_p1;
reg   [63:0] zext_ln40_1_reg_223;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [5:0] j_fu_44;
wire   [5:0] add_ln38_fu_173_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_48;
wire   [5:0] select_ln36_1_fu_138_p3;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten_fu_52;
wire   [10:0] add_ln36_1_fu_106_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg    input_layer_ce0_local;
reg    IBRAM_we0_local;
wire   [31:0] bitcast_ln40_fu_194_p1;
reg    IBRAM_ce0_local;
wire   [0:0] icmp_ln38_fu_124_p2;
wire   [5:0] add_ln36_fu_118_p2;
wire   [4:0] trunc_ln40_fu_146_p1;
wire   [5:0] select_ln36_fu_130_p3;
wire   [9:0] tmp_1_fu_150_p3;
wire   [9:0] zext_ln40_fu_158_p1;
wire   [9:0] add_ln40_fu_162_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 j_fu_44 = 6'd0;
#0 i_fu_48 = 6'd0;
#0 indvar_flatten_fu_52 = 11'd0;
#0 ap_done_reg = 1'b0;
end

lenet5_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_48 <= select_ln36_1_fu_138_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_52 <= add_ln36_1_fu_106_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_52 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_44 <= add_ln38_fu_173_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_44 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln40_1_reg_223[9 : 0] <= zext_ln40_1_fu_168_p1[9 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IBRAM_ce0_local = 1'b1;
    end else begin
        IBRAM_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IBRAM_we0_local = 1'b1;
    end else begin
        IBRAM_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_100_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_layer_ce0_local = 1'b1;
    end else begin
        input_layer_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IBRAM_address0 = zext_ln40_1_reg_223;

assign IBRAM_ce0 = IBRAM_ce0_local;

assign IBRAM_d0 = bitcast_ln40_fu_194_p1;

assign IBRAM_we0 = IBRAM_we0_local;

assign add_ln36_1_fu_106_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln36_fu_118_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln38_fu_173_p2 = (select_ln36_fu_130_p3 + 6'd1);

assign add_ln40_fu_162_p2 = (tmp_1_fu_150_p3 + zext_ln40_fu_158_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln40_fu_194_p1 = input_layer_q0;

assign icmp_ln36_fu_100_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_124_p2 = ((ap_sig_allocacmp_j_load == 6'd32) ? 1'b1 : 1'b0);

assign input_layer_address0 = zext_ln40_1_fu_168_p1;

assign input_layer_ce0 = input_layer_ce0_local;

assign select_ln36_1_fu_138_p3 = ((icmp_ln38_fu_124_p2[0:0] == 1'b1) ? add_ln36_fu_118_p2 : ap_sig_allocacmp_i_load);

assign select_ln36_fu_130_p3 = ((icmp_ln38_fu_124_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign tmp_1_fu_150_p3 = {{trunc_ln40_fu_146_p1}, {5'd0}};

assign trunc_ln40_fu_146_p1 = select_ln36_1_fu_138_p3[4:0];

assign zext_ln40_1_fu_168_p1 = add_ln40_fu_162_p2;

assign zext_ln40_fu_158_p1 = select_ln36_fu_130_p3;

always @ (posedge ap_clk) begin
    zext_ln40_1_reg_223[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //lenet5_CONVOLUTION_LAYER_1_Pipeline_copy_input_2_copy_input_3
