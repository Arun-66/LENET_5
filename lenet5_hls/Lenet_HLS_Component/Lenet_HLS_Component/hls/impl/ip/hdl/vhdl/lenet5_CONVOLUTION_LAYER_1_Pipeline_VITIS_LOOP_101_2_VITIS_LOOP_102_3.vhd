-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OBRAM_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_ce0 : OUT STD_LOGIC;
    OBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_1_ce0 : OUT STD_LOGIC;
    OBRAM_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_2_ce0 : OUT STD_LOGIC;
    OBRAM_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_3_ce0 : OUT STD_LOGIC;
    OBRAM_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_4_ce0 : OUT STD_LOGIC;
    OBRAM_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_5_ce0 : OUT STD_LOGIC;
    OBRAM_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_77_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_ce : OUT STD_LOGIC;
    grp_fu_81_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_81_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_81_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_81_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_81_p_ce : OUT STD_LOGIC;
    grp_fu_85_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_85_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_ce : OUT STD_LOGIC;
    grp_fu_89_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_89_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_89_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_89_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_C0000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000000000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv13_1260 : STD_LOGIC_VECTOR (12 downto 0) := "1001001100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv27_3334 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000011001100110100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv13_30C : STD_LOGIC_VECTOR (12 downto 0) := "0001100001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln101_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln102_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_fu_322_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln101_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_388_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln104_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_reg_554 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_reg_554_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_565 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter18_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter19_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter20_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter21_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter22_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter23_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter24_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter25_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter26_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter27_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter28_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter29_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter30_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter31_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter32_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_565_pp0_iter33_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal x_assign_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln104_fu_458_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_reg_580_pp0_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal exp2x_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal exp2x_reg_589_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal exp2x_reg_589_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal exp2x_reg_589_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal exp2x_reg_589_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_i_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal hconv1_local_local_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal hconv1_1_local_local_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal hconv1_2_local_local_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal hconv1_3_local_local_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal hconv1_4_local_local_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln102_1_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln104_1_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_84 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln102_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_88 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln101_1_fu_365_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten49_fu_92 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln101_1_fu_307_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten49_load : STD_LOGIC_VECTOR (12 downto 0);
    signal OBRAM_ce0_local : STD_LOGIC;
    signal OBRAM_1_ce0_local : STD_LOGIC;
    signal OBRAM_2_ce0_local : STD_LOGIC;
    signal OBRAM_3_ce0_local : STD_LOGIC;
    signal OBRAM_4_ce0_local : STD_LOGIC;
    signal OBRAM_5_ce0_local : STD_LOGIC;
    signal hconv1_3_local_local_we0_local : STD_LOGIC;
    signal hconv1_3_local_local_ce0_local : STD_LOGIC;
    signal hconv1_2_local_local_we0_local : STD_LOGIC;
    signal hconv1_2_local_local_ce0_local : STD_LOGIC;
    signal hconv1_1_local_local_we0_local : STD_LOGIC;
    signal hconv1_1_local_local_ce0_local : STD_LOGIC;
    signal hconv1_local_local_we0_local : STD_LOGIC;
    signal hconv1_local_local_ce0_local : STD_LOGIC;
    signal hconv1_4_local_local_we0_local : STD_LOGIC;
    signal hconv1_4_local_local_ce0_local : STD_LOGIC;
    signal add_ln101_fu_359_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_376_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_388_p13 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln102_fu_384_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_425_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_425_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_470_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln104_1_fu_442_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln104_1_fu_442_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln104_1_fu_442_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_470_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_470_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_470_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_470_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_470_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln104_1_fu_442_p00 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_fu_388_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_388_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_388_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_388_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_388_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_388_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lenet5_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_fexp_32ns_32ns_32_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_sparsemux_13_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_urem_10ns_4ns_3_14_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component lenet5_mul_13ns_15ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component lenet5_mac_muladd_10ns_3ns_10ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3_hconv1_local_lbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    hconv1_local_local_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3_hconv1_local_lbkb
    generic map (
        DataWidth => 32,
        AddressRange => 941,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hconv1_local_local_address0,
        ce0 => hconv1_local_local_ce0_local,
        we0 => hconv1_local_local_we0_local,
        d0 => div_i_reg_600);

    hconv1_1_local_local_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3_hconv1_local_lbkb
    generic map (
        DataWidth => 32,
        AddressRange => 941,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hconv1_1_local_local_address0,
        ce0 => hconv1_1_local_local_ce0_local,
        we0 => hconv1_1_local_local_we0_local,
        d0 => div_i_reg_600);

    hconv1_2_local_local_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3_hconv1_local_lbkb
    generic map (
        DataWidth => 32,
        AddressRange => 941,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hconv1_2_local_local_address0,
        ce0 => hconv1_2_local_local_ce0_local,
        we0 => hconv1_2_local_local_we0_local,
        d0 => div_i_reg_600);

    hconv1_3_local_local_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3_hconv1_local_lbkb
    generic map (
        DataWidth => 32,
        AddressRange => 941,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hconv1_3_local_local_address0,
        ce0 => hconv1_3_local_local_ce0_local,
        we0 => hconv1_3_local_local_we0_local,
        d0 => div_i_reg_600);

    hconv1_4_local_local_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_VITIS_LOOP_101_2_VITIS_LOOP_102_3_hconv1_local_lbkb
    generic map (
        DataWidth => 32,
        AddressRange => 941,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hconv1_4_local_local_address0,
        ce0 => hconv1_4_local_local_ce0_local,
        we0 => hconv1_4_local_local_we0_local,
        d0 => div_i_reg_600);

    fdiv_32ns_32ns_32_9_no_dsp_1_U29 : component lenet5_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_i_reg_595,
        din1 => exp2x_reg_589_pp0_iter24_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    fexp_32ns_32ns_32_8_full_dsp_1_U30 : component lenet5_fexp_32ns_32ns_32_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => mul_i_reg_575,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    sparsemux_13_3_32_1_1_U31 : component lenet5_sparsemux_13_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => OBRAM_q0,
        din1 => OBRAM_1_q0,
        din2 => OBRAM_2_q0,
        din3 => OBRAM_3_q0,
        din4 => OBRAM_4_q0,
        din5 => OBRAM_5_q0,
        def => tmp_fu_388_p13,
        sel => select_ln101_1_fu_365_p3,
        dout => tmp_fu_388_p15);

    urem_10ns_4ns_3_14_1_U32 : component lenet5_urem_10ns_4ns_3_14_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_425_p0,
        din1 => grp_fu_425_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);

    mul_13ns_15ns_27_1_1_U33 : component lenet5_mul_13ns_15ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 15,
        dout_WIDTH => 27)
    port map (
        din0 => mul_ln104_1_fu_442_p0,
        din1 => mul_ln104_1_fu_442_p1,
        dout => mul_ln104_1_fu_442_p2);

    mac_muladd_10ns_3ns_10ns_13_4_1_U34 : component lenet5_mac_muladd_10ns_3ns_10ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 3,
        din2_WIDTH => 10,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_470_p0,
        din1 => grp_fu_470_p1,
        din2 => grp_fu_470_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_470_p3);

    flow_control_loop_pipe_sequential_init_U : component lenet5_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter33_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten49_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln101_fu_301_p2 = ap_const_lv1_0))) then 
                    indvar_flatten49_fu_92 <= add_ln101_1_fu_307_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten49_fu_92 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_88 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_88 <= select_ln101_1_fu_365_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln101_fu_301_p2 = ap_const_lv1_0))) then 
                    k_fu_84 <= add_ln102_fu_340_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_84 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln104_reg_554 <= add_ln104_fu_420_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln102_reg_504 <= icmp_ln102_fu_316_p2;
                select_ln101_reg_509 <= select_ln101_fu_322_p3;
                tmp_reg_549 <= tmp_fu_388_p15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln104_reg_554_pp0_iter2_reg <= add_ln104_reg_554;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                div_i_reg_600 <= grp_fu_274_p2;
                exp2x_reg_589 <= grp_fu_81_p_dout0;
                exp2x_reg_589_pp0_iter21_reg <= exp2x_reg_589;
                exp2x_reg_589_pp0_iter22_reg <= exp2x_reg_589_pp0_iter21_reg;
                exp2x_reg_589_pp0_iter23_reg <= exp2x_reg_589_pp0_iter22_reg;
                exp2x_reg_589_pp0_iter24_reg <= exp2x_reg_589_pp0_iter23_reg;
                mul_i_reg_575 <= grp_fu_89_p_dout0;
                sub_i_reg_595 <= grp_fu_85_p_dout0;
                tmp_1_reg_565 <= mul_ln104_1_fu_442_p2(26 downto 16);
                tmp_1_reg_565_pp0_iter10_reg <= tmp_1_reg_565_pp0_iter9_reg;
                tmp_1_reg_565_pp0_iter11_reg <= tmp_1_reg_565_pp0_iter10_reg;
                tmp_1_reg_565_pp0_iter12_reg <= tmp_1_reg_565_pp0_iter11_reg;
                tmp_1_reg_565_pp0_iter13_reg <= tmp_1_reg_565_pp0_iter12_reg;
                tmp_1_reg_565_pp0_iter14_reg <= tmp_1_reg_565_pp0_iter13_reg;
                tmp_1_reg_565_pp0_iter15_reg <= tmp_1_reg_565_pp0_iter14_reg;
                tmp_1_reg_565_pp0_iter16_reg <= tmp_1_reg_565_pp0_iter15_reg;
                tmp_1_reg_565_pp0_iter17_reg <= tmp_1_reg_565_pp0_iter16_reg;
                tmp_1_reg_565_pp0_iter18_reg <= tmp_1_reg_565_pp0_iter17_reg;
                tmp_1_reg_565_pp0_iter19_reg <= tmp_1_reg_565_pp0_iter18_reg;
                tmp_1_reg_565_pp0_iter20_reg <= tmp_1_reg_565_pp0_iter19_reg;
                tmp_1_reg_565_pp0_iter21_reg <= tmp_1_reg_565_pp0_iter20_reg;
                tmp_1_reg_565_pp0_iter22_reg <= tmp_1_reg_565_pp0_iter21_reg;
                tmp_1_reg_565_pp0_iter23_reg <= tmp_1_reg_565_pp0_iter22_reg;
                tmp_1_reg_565_pp0_iter24_reg <= tmp_1_reg_565_pp0_iter23_reg;
                tmp_1_reg_565_pp0_iter25_reg <= tmp_1_reg_565_pp0_iter24_reg;
                tmp_1_reg_565_pp0_iter26_reg <= tmp_1_reg_565_pp0_iter25_reg;
                tmp_1_reg_565_pp0_iter27_reg <= tmp_1_reg_565_pp0_iter26_reg;
                tmp_1_reg_565_pp0_iter28_reg <= tmp_1_reg_565_pp0_iter27_reg;
                tmp_1_reg_565_pp0_iter29_reg <= tmp_1_reg_565_pp0_iter28_reg;
                tmp_1_reg_565_pp0_iter30_reg <= tmp_1_reg_565_pp0_iter29_reg;
                tmp_1_reg_565_pp0_iter31_reg <= tmp_1_reg_565_pp0_iter30_reg;
                tmp_1_reg_565_pp0_iter32_reg <= tmp_1_reg_565_pp0_iter31_reg;
                tmp_1_reg_565_pp0_iter33_reg <= tmp_1_reg_565_pp0_iter32_reg;
                tmp_1_reg_565_pp0_iter5_reg <= tmp_1_reg_565;
                tmp_1_reg_565_pp0_iter6_reg <= tmp_1_reg_565_pp0_iter5_reg;
                tmp_1_reg_565_pp0_iter7_reg <= tmp_1_reg_565_pp0_iter6_reg;
                tmp_1_reg_565_pp0_iter8_reg <= tmp_1_reg_565_pp0_iter7_reg;
                tmp_1_reg_565_pp0_iter9_reg <= tmp_1_reg_565_pp0_iter8_reg;
                tmp_s_reg_584 <= grp_fu_278_p2;
                trunc_ln104_reg_580 <= trunc_ln104_fu_458_p1;
                trunc_ln104_reg_580_pp0_iter15_reg <= trunc_ln104_reg_580;
                trunc_ln104_reg_580_pp0_iter16_reg <= trunc_ln104_reg_580_pp0_iter15_reg;
                trunc_ln104_reg_580_pp0_iter17_reg <= trunc_ln104_reg_580_pp0_iter16_reg;
                trunc_ln104_reg_580_pp0_iter18_reg <= trunc_ln104_reg_580_pp0_iter17_reg;
                trunc_ln104_reg_580_pp0_iter19_reg <= trunc_ln104_reg_580_pp0_iter18_reg;
                trunc_ln104_reg_580_pp0_iter20_reg <= trunc_ln104_reg_580_pp0_iter19_reg;
                trunc_ln104_reg_580_pp0_iter21_reg <= trunc_ln104_reg_580_pp0_iter20_reg;
                trunc_ln104_reg_580_pp0_iter22_reg <= trunc_ln104_reg_580_pp0_iter21_reg;
                trunc_ln104_reg_580_pp0_iter23_reg <= trunc_ln104_reg_580_pp0_iter22_reg;
                trunc_ln104_reg_580_pp0_iter24_reg <= trunc_ln104_reg_580_pp0_iter23_reg;
                trunc_ln104_reg_580_pp0_iter25_reg <= trunc_ln104_reg_580_pp0_iter24_reg;
                trunc_ln104_reg_580_pp0_iter26_reg <= trunc_ln104_reg_580_pp0_iter25_reg;
                trunc_ln104_reg_580_pp0_iter27_reg <= trunc_ln104_reg_580_pp0_iter26_reg;
                trunc_ln104_reg_580_pp0_iter28_reg <= trunc_ln104_reg_580_pp0_iter27_reg;
                trunc_ln104_reg_580_pp0_iter29_reg <= trunc_ln104_reg_580_pp0_iter28_reg;
                trunc_ln104_reg_580_pp0_iter30_reg <= trunc_ln104_reg_580_pp0_iter29_reg;
                trunc_ln104_reg_580_pp0_iter31_reg <= trunc_ln104_reg_580_pp0_iter30_reg;
                trunc_ln104_reg_580_pp0_iter32_reg <= trunc_ln104_reg_580_pp0_iter31_reg;
                trunc_ln104_reg_580_pp0_iter33_reg <= trunc_ln104_reg_580_pp0_iter32_reg;
                x_assign_reg_570 <= grp_fu_77_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OBRAM_1_address0 <= zext_ln102_1_fu_330_p1(10 - 1 downto 0);
    OBRAM_1_ce0 <= OBRAM_1_ce0_local;

    OBRAM_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OBRAM_1_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_2_address0 <= zext_ln102_1_fu_330_p1(10 - 1 downto 0);
    OBRAM_2_ce0 <= OBRAM_2_ce0_local;

    OBRAM_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OBRAM_2_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_3_address0 <= zext_ln102_1_fu_330_p1(10 - 1 downto 0);
    OBRAM_3_ce0 <= OBRAM_3_ce0_local;

    OBRAM_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OBRAM_3_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_4_address0 <= zext_ln102_1_fu_330_p1(10 - 1 downto 0);
    OBRAM_4_ce0 <= OBRAM_4_ce0_local;

    OBRAM_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OBRAM_4_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_5_address0 <= zext_ln102_1_fu_330_p1(10 - 1 downto 0);
    OBRAM_5_ce0 <= OBRAM_5_ce0_local;

    OBRAM_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OBRAM_5_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_address0 <= zext_ln102_1_fu_330_p1(10 - 1 downto 0);
    OBRAM_ce0 <= OBRAM_ce0_local;

    OBRAM_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OBRAM_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln101_1_fu_307_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten49_load) + unsigned(ap_const_lv13_1));
    add_ln101_fu_359_p2 <= std_logic_vector(unsigned(j_fu_88) + unsigned(ap_const_lv3_1));
    add_ln102_fu_340_p2 <= std_logic_vector(unsigned(select_ln101_fu_322_p3) + unsigned(ap_const_lv10_1));
    add_ln104_fu_420_p2 <= std_logic_vector(unsigned(select_ln101_reg_509) + unsigned(zext_ln102_fu_384_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln101_fu_301_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln101_fu_301_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter33_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter33_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten49_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten49_fu_92)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten49_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten49_load <= indvar_flatten49_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_84, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_84;
        end if; 
    end process;

    grp_fu_425_p0 <= std_logic_vector(unsigned(select_ln101_reg_509) + unsigned(zext_ln102_fu_384_p1));
    grp_fu_425_p1 <= ap_const_lv10_5(4 - 1 downto 0);
    grp_fu_470_p0 <= ap_const_lv13_30C(10 - 1 downto 0);
    grp_fu_470_p1 <= grp_fu_470_p10(3 - 1 downto 0);
    grp_fu_470_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln101_1_fu_365_p3),13));
    grp_fu_470_p2 <= grp_fu_470_p20(10 - 1 downto 0);
    grp_fu_470_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_reg_554_pp0_iter2_reg),13));
    grp_fu_77_p_ce <= ap_const_logic_1;
    grp_fu_77_p_din0 <= tmp_reg_549;
    grp_fu_77_p_din1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    grp_fu_77_p_opcode <= ap_const_lv2_0;
    grp_fu_81_p_ce <= ap_const_logic_1;
    grp_fu_81_p_din0 <= tmp_s_reg_584;
    grp_fu_81_p_din1 <= ap_const_lv32_3F800000;
    grp_fu_81_p_opcode <= ap_const_lv2_0;
    grp_fu_85_p_ce <= ap_const_logic_1;
    grp_fu_85_p_din0 <= exp2x_reg_589;
    grp_fu_85_p_din1 <= ap_const_lv32_C0000000;
    grp_fu_85_p_opcode <= ap_const_lv2_0;
    grp_fu_89_p_ce <= ap_const_logic_1;
    grp_fu_89_p_din0 <= x_assign_reg_570;
    grp_fu_89_p_din1 <= ap_const_lv32_40000000;
    hconv1_1_local_local_address0 <= zext_ln104_1_fu_462_p1(10 - 1 downto 0);

    hconv1_1_local_local_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_1_local_local_ce0_local <= ap_const_logic_1;
        else 
            hconv1_1_local_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    hconv1_1_local_local_we0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001, trunc_ln104_reg_580_pp0_iter33_reg)
    begin
        if (((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_1_local_local_we0_local <= ap_const_logic_1;
        else 
            hconv1_1_local_local_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    hconv1_2_local_local_address0 <= zext_ln104_1_fu_462_p1(10 - 1 downto 0);

    hconv1_2_local_local_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_2_local_local_ce0_local <= ap_const_logic_1;
        else 
            hconv1_2_local_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    hconv1_2_local_local_we0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001, trunc_ln104_reg_580_pp0_iter33_reg)
    begin
        if (((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_2_local_local_we0_local <= ap_const_logic_1;
        else 
            hconv1_2_local_local_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    hconv1_3_local_local_address0 <= zext_ln104_1_fu_462_p1(10 - 1 downto 0);

    hconv1_3_local_local_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_3_local_local_ce0_local <= ap_const_logic_1;
        else 
            hconv1_3_local_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    hconv1_3_local_local_we0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001, trunc_ln104_reg_580_pp0_iter33_reg)
    begin
        if (((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_3_local_local_we0_local <= ap_const_logic_1;
        else 
            hconv1_3_local_local_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    hconv1_4_local_local_address0 <= zext_ln104_1_fu_462_p1(10 - 1 downto 0);

    hconv1_4_local_local_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_4_local_local_ce0_local <= ap_const_logic_1;
        else 
            hconv1_4_local_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    hconv1_4_local_local_we0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001, trunc_ln104_reg_580_pp0_iter33_reg)
    begin
        if ((not((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_0)) and not((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_1)) and not((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_2)) and not((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_3)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_4_local_local_we0_local <= ap_const_logic_1;
        else 
            hconv1_4_local_local_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    hconv1_local_local_address0 <= zext_ln104_1_fu_462_p1(10 - 1 downto 0);

    hconv1_local_local_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_local_local_ce0_local <= ap_const_logic_1;
        else 
            hconv1_local_local_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    hconv1_local_local_we0_local_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001, trunc_ln104_reg_580_pp0_iter33_reg)
    begin
        if (((trunc_ln104_reg_580_pp0_iter33_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            hconv1_local_local_we0_local <= ap_const_logic_1;
        else 
            hconv1_local_local_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln101_fu_301_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten49_load = ap_const_lv13_1260) else "0";
    icmp_ln102_fu_316_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv10_310) else "0";
    mul_ln104_1_fu_442_p0 <= mul_ln104_1_fu_442_p00(13 - 1 downto 0);
    mul_ln104_1_fu_442_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_470_p3),27));
    mul_ln104_1_fu_442_p1 <= ap_const_lv27_3334(15 - 1 downto 0);
    select_ln101_1_fu_365_p3 <= 
        add_ln101_fu_359_p2 when (icmp_ln102_reg_504(0) = '1') else 
        j_fu_88;
    select_ln101_fu_322_p3 <= 
        ap_const_lv10_0 when (icmp_ln102_fu_316_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    tmp_5_fu_376_p3 <= (select_ln101_1_fu_365_p3 & ap_const_lv2_0);
    tmp_fu_388_p13 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln104_fu_458_p1 <= grp_fu_425_p2(3 - 1 downto 0);
    zext_ln102_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln101_fu_322_p3),64));
    zext_ln102_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_376_p3),10));
    zext_ln104_1_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_565_pp0_iter33_reg),64));
end behav;
