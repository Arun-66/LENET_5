-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IBRAM_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IBRAM_ce0 : OUT STD_LOGIC;
    IBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_ce0 : OUT STD_LOGIC;
    OBRAM_we0 : OUT STD_LOGIC;
    OBRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_ce1 : OUT STD_LOGIC;
    OBRAM_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_1_ce0 : OUT STD_LOGIC;
    OBRAM_1_we0 : OUT STD_LOGIC;
    OBRAM_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_1_ce1 : OUT STD_LOGIC;
    OBRAM_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_2_ce0 : OUT STD_LOGIC;
    OBRAM_2_we0 : OUT STD_LOGIC;
    OBRAM_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_2_ce1 : OUT STD_LOGIC;
    OBRAM_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_3_ce0 : OUT STD_LOGIC;
    OBRAM_3_we0 : OUT STD_LOGIC;
    OBRAM_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_3_ce1 : OUT STD_LOGIC;
    OBRAM_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_4_ce0 : OUT STD_LOGIC;
    OBRAM_4_we0 : OUT STD_LOGIC;
    OBRAM_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_4_ce1 : OUT STD_LOGIC;
    OBRAM_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_5_ce0 : OUT STD_LOGIC;
    OBRAM_5_we0 : OUT STD_LOGIC;
    OBRAM_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OBRAM_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OBRAM_5_ce1 : OUT STD_LOGIC;
    OBRAM_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_77_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_77_p_ce : OUT STD_LOGIC;
    grp_fu_81_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_81_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_81_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_81_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_81_p_ce : OUT STD_LOGIC;
    grp_fu_85_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_85_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_ce : OUT STD_LOGIC;
    grp_fu_89_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_89_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_89_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_89_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4C90 : STD_LOGIC_VECTOR (14 downto 0) := "100110010010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_F50 : STD_LOGIC_VECTOR (12 downto 0) := "0111101010000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln73_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal col_mid2_fu_549_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_mid2_reg_845 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_mid2_reg_845_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal col_mid2_reg_845_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln77_fu_557_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln77_reg_850 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln77_reg_850_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln77_reg_850_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_27_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_886_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal WBRAM_load_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_1_load_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_2_load_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_3_load_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_4_load_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_5_load_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_pixel_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal OBRAM_addr_reg_941 : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_addr_reg_941_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_addr_reg_941_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_addr_reg_941_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_addr_reg_941_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_addr_reg_941_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_1_addr_reg_947 : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_1_addr_reg_947_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_1_addr_reg_947_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_1_addr_reg_947_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_1_addr_reg_947_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_1_addr_reg_947_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_2_addr_reg_953 : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_2_addr_reg_953_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_2_addr_reg_953_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_2_addr_reg_953_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_2_addr_reg_953_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_2_addr_reg_953_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_3_addr_reg_959 : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_3_addr_reg_959_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_3_addr_reg_959_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_3_addr_reg_959_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_3_addr_reg_959_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_3_addr_reg_959_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_4_addr_reg_965 : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_4_addr_reg_965_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_4_addr_reg_965_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_4_addr_reg_965_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_4_addr_reg_965_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_4_addr_reg_965_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_5_addr_reg_971 : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_5_addr_reg_971_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_5_addr_reg_971_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_5_addr_reg_971_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_5_addr_reg_971_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal OBRAM_5_addr_reg_971_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_977_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_977_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_977_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_1_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_1_reg_983_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_1_reg_983_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_1_reg_983_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_2_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_2_reg_989_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_2_reg_989_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_2_reg_989_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_3_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_3_reg_995_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_3_reg_995_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_3_reg_995_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_4_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_4_reg_1001_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_4_reg_1001_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_4_reg_1001_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_5_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_5_reg_1007_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_5_reg_1007_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul110_5_reg_1007_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal OBRAM_load_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal OBRAM_1_load_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal OBRAM_2_load_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal OBRAM_3_load_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal OBRAM_4_load_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal OBRAM_5_load_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge75105_fu_756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge75105_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge738789103_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge738789103_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge77798591101_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge77798591101_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge7281839399_fu_774_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge7281839399_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge749597_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge749597_reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge76_fu_786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge76_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal WBRAM_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal WBRAM_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal WBRAM_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal WBRAM_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal WBRAM_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal WBRAM_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal WBRAM_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln81_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_fu_72 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln79_fu_644_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal row_fu_76 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten6_fu_80 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln77_1_fu_656_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_k_fu_84 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln75_fu_523_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten19_fu_88 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal select_ln75_1_fu_670_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_k_fu_92 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln73_1_fu_477_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten42_fu_96 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln73_1_fu_403_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal WBRAM_ce0_local : STD_LOGIC;
    signal WBRAM_1_ce0_local : STD_LOGIC;
    signal WBRAM_2_ce0_local : STD_LOGIC;
    signal WBRAM_3_ce0_local : STD_LOGIC;
    signal WBRAM_4_ce0_local : STD_LOGIC;
    signal WBRAM_5_ce0_local : STD_LOGIC;
    signal IBRAM_ce0_local : STD_LOGIC;
    signal OBRAM_ce1_local : STD_LOGIC;
    signal OBRAM_we0_local : STD_LOGIC;
    signal OBRAM_ce0_local : STD_LOGIC;
    signal OBRAM_1_ce1_local : STD_LOGIC;
    signal OBRAM_1_we0_local : STD_LOGIC;
    signal OBRAM_1_ce0_local : STD_LOGIC;
    signal OBRAM_2_ce1_local : STD_LOGIC;
    signal OBRAM_2_we0_local : STD_LOGIC;
    signal OBRAM_2_ce0_local : STD_LOGIC;
    signal OBRAM_3_ce1_local : STD_LOGIC;
    signal OBRAM_3_we0_local : STD_LOGIC;
    signal OBRAM_3_ce0_local : STD_LOGIC;
    signal OBRAM_4_ce1_local : STD_LOGIC;
    signal OBRAM_4_we0_local : STD_LOGIC;
    signal OBRAM_4_ce0_local : STD_LOGIC;
    signal OBRAM_5_ce1_local : STD_LOGIC;
    signal OBRAM_5_we0_local : STD_LOGIC;
    signal OBRAM_5_ce0_local : STD_LOGIC;
    signal icmp_ln75_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln73_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_fu_427_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln73_fu_439_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln73_1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten8_not_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten8_mid241_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_485_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_mid213_fu_497_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln79_mid218_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_23_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln77_fu_531_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln73_fu_565_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln73_2_fu_577_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln75_cast_fu_587_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_25_fu_591_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_26_fu_607_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln73_1_fu_583_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_28_fu_619_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln81_fu_625_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_631_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln77_1_fu_650_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_1_fu_664_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_720_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_713_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl12_fu_727_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln79_fu_737_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_29_fu_731_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_30_fu_740_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component lenet5_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL_WBRAM_5_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet5_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    WBRAM_5_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL_WBRAM_5_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WBRAM_5_address0,
        ce0 => WBRAM_5_ce0_local,
        q0 => WBRAM_5_q0);

    WBRAM_4_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL_WBRAM_5_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WBRAM_4_address0,
        ce0 => WBRAM_4_ce0_local,
        q0 => WBRAM_4_q0);

    WBRAM_3_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL_WBRAM_5_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WBRAM_3_address0,
        ce0 => WBRAM_3_ce0_local,
        q0 => WBRAM_3_q0);

    WBRAM_2_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL_WBRAM_5_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WBRAM_2_address0,
        ce0 => WBRAM_2_ce0_local,
        q0 => WBRAM_2_q0);

    WBRAM_1_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL_WBRAM_5_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WBRAM_1_address0,
        ce0 => WBRAM_1_ce0_local,
        q0 => WBRAM_1_q0);

    WBRAM_U : component lenet5_CONVOLUTION_LAYER_1_Pipeline_ROW_K_COL_K_ROW_COL_WBRAM_5_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WBRAM_address0,
        ce0 => WBRAM_ce0_local,
        q0 => WBRAM_q0);

    fadd_32ns_32ns_32_4_full_dsp_1_U6 : component lenet5_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OBRAM_3_load_reg_1028,
        din1 => mul110_3_reg_995,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U7 : component lenet5_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OBRAM_4_load_reg_1033,
        din1 => mul110_4_reg_1001,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U8 : component lenet5_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OBRAM_5_load_reg_1038,
        din1 => mul110_5_reg_1007,
        ce => ap_const_logic_1,
        dout => grp_fu_331_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U10 : component lenet5_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_pixel_reg_931,
        din1 => WBRAM_1_load_reg_906,
        ce => ap_const_logic_1,
        dout => grp_fu_339_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U11 : component lenet5_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_pixel_reg_931,
        din1 => WBRAM_2_load_reg_911,
        ce => ap_const_logic_1,
        dout => grp_fu_343_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U12 : component lenet5_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_pixel_reg_931,
        din1 => WBRAM_3_load_reg_916,
        ce => ap_const_logic_1,
        dout => grp_fu_347_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U13 : component lenet5_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_pixel_reg_931,
        din1 => WBRAM_4_load_reg_921,
        ce => ap_const_logic_1,
        dout => grp_fu_351_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U14 : component lenet5_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_pixel_reg_931,
        din1 => WBRAM_5_load_reg_926,
        ce => ap_const_logic_1,
        dout => grp_fu_355_p2);

    flow_control_loop_pipe_sequential_init_U : component lenet5_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    col_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_72 <= ap_const_lv5_0;
                elsif (((icmp_ln73_fu_397_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    col_fu_72 <= add_ln79_fu_644_p2;
                end if;
            end if; 
        end if;
    end process;

    col_k_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_k_fu_84 <= ap_const_lv3_0;
                elsif (((icmp_ln73_fu_397_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    col_k_fu_84 <= select_ln75_fu_523_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten19_fu_88 <= ap_const_lv13_0;
                elsif (((icmp_ln73_fu_397_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten19_fu_88 <= select_ln75_1_fu_670_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten42_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten42_fu_96 <= ap_const_lv15_0;
                elsif (((icmp_ln73_fu_397_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten42_fu_96 <= add_ln73_1_fu_403_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_80 <= ap_const_lv10_0;
                elsif (((icmp_ln73_fu_397_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten6_fu_80 <= select_ln77_1_fu_656_p3;
                end if;
            end if; 
        end if;
    end process;

    row_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_76 <= ap_const_lv5_0;
                elsif (((icmp_ln73_fu_397_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    row_fu_76 <= select_ln77_fu_557_p3;
                end if;
            end if; 
        end if;
    end process;

    row_k_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    row_k_fu_92 <= ap_const_lv3_0;
                elsif (((icmp_ln73_fu_397_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    row_k_fu_92 <= select_ln73_1_fu_477_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                OBRAM_1_addr_reg_947 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
                OBRAM_1_addr_reg_947_pp0_iter5_reg <= OBRAM_1_addr_reg_947;
                OBRAM_1_addr_reg_947_pp0_iter6_reg <= OBRAM_1_addr_reg_947_pp0_iter5_reg;
                OBRAM_1_addr_reg_947_pp0_iter7_reg <= OBRAM_1_addr_reg_947_pp0_iter6_reg;
                OBRAM_1_addr_reg_947_pp0_iter8_reg <= OBRAM_1_addr_reg_947_pp0_iter7_reg;
                OBRAM_1_addr_reg_947_pp0_iter9_reg <= OBRAM_1_addr_reg_947_pp0_iter8_reg;
                OBRAM_2_addr_reg_953 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
                OBRAM_2_addr_reg_953_pp0_iter5_reg <= OBRAM_2_addr_reg_953;
                OBRAM_2_addr_reg_953_pp0_iter6_reg <= OBRAM_2_addr_reg_953_pp0_iter5_reg;
                OBRAM_2_addr_reg_953_pp0_iter7_reg <= OBRAM_2_addr_reg_953_pp0_iter6_reg;
                OBRAM_2_addr_reg_953_pp0_iter8_reg <= OBRAM_2_addr_reg_953_pp0_iter7_reg;
                OBRAM_2_addr_reg_953_pp0_iter9_reg <= OBRAM_2_addr_reg_953_pp0_iter8_reg;
                OBRAM_3_addr_reg_959 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
                OBRAM_3_addr_reg_959_pp0_iter5_reg <= OBRAM_3_addr_reg_959;
                OBRAM_3_addr_reg_959_pp0_iter6_reg <= OBRAM_3_addr_reg_959_pp0_iter5_reg;
                OBRAM_3_addr_reg_959_pp0_iter7_reg <= OBRAM_3_addr_reg_959_pp0_iter6_reg;
                OBRAM_3_addr_reg_959_pp0_iter8_reg <= OBRAM_3_addr_reg_959_pp0_iter7_reg;
                OBRAM_3_addr_reg_959_pp0_iter9_reg <= OBRAM_3_addr_reg_959_pp0_iter8_reg;
                OBRAM_4_addr_reg_965 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
                OBRAM_4_addr_reg_965_pp0_iter5_reg <= OBRAM_4_addr_reg_965;
                OBRAM_4_addr_reg_965_pp0_iter6_reg <= OBRAM_4_addr_reg_965_pp0_iter5_reg;
                OBRAM_4_addr_reg_965_pp0_iter7_reg <= OBRAM_4_addr_reg_965_pp0_iter6_reg;
                OBRAM_4_addr_reg_965_pp0_iter8_reg <= OBRAM_4_addr_reg_965_pp0_iter7_reg;
                OBRAM_4_addr_reg_965_pp0_iter9_reg <= OBRAM_4_addr_reg_965_pp0_iter8_reg;
                OBRAM_5_addr_reg_971 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
                OBRAM_5_addr_reg_971_pp0_iter5_reg <= OBRAM_5_addr_reg_971;
                OBRAM_5_addr_reg_971_pp0_iter6_reg <= OBRAM_5_addr_reg_971_pp0_iter5_reg;
                OBRAM_5_addr_reg_971_pp0_iter7_reg <= OBRAM_5_addr_reg_971_pp0_iter6_reg;
                OBRAM_5_addr_reg_971_pp0_iter8_reg <= OBRAM_5_addr_reg_971_pp0_iter7_reg;
                OBRAM_5_addr_reg_971_pp0_iter9_reg <= OBRAM_5_addr_reg_971_pp0_iter8_reg;
                OBRAM_addr_reg_941 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
                OBRAM_addr_reg_941_pp0_iter5_reg <= OBRAM_addr_reg_941;
                OBRAM_addr_reg_941_pp0_iter6_reg <= OBRAM_addr_reg_941_pp0_iter5_reg;
                OBRAM_addr_reg_941_pp0_iter7_reg <= OBRAM_addr_reg_941_pp0_iter6_reg;
                OBRAM_addr_reg_941_pp0_iter8_reg <= OBRAM_addr_reg_941_pp0_iter7_reg;
                OBRAM_addr_reg_941_pp0_iter9_reg <= OBRAM_addr_reg_941_pp0_iter8_reg;
                WBRAM_1_load_reg_906 <= WBRAM_1_q0;
                WBRAM_2_load_reg_911 <= WBRAM_2_q0;
                WBRAM_3_load_reg_916 <= WBRAM_3_q0;
                WBRAM_4_load_reg_921 <= WBRAM_4_q0;
                WBRAM_5_load_reg_926 <= WBRAM_5_q0;
                WBRAM_load_reg_901 <= WBRAM_q0;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                col_mid2_reg_845_pp0_iter2_reg <= col_mid2_reg_845;
                col_mid2_reg_845_pp0_iter3_reg <= col_mid2_reg_845_pp0_iter2_reg;
                empty_27_reg_886_pp0_iter2_reg <= empty_27_reg_886;
                empty_27_reg_886_pp0_iter3_reg <= empty_27_reg_886_pp0_iter2_reg;
                empty_27_reg_886_pp0_iter4_reg <= empty_27_reg_886_pp0_iter3_reg;
                empty_27_reg_886_pp0_iter5_reg <= empty_27_reg_886_pp0_iter4_reg;
                empty_27_reg_886_pp0_iter6_reg <= empty_27_reg_886_pp0_iter5_reg;
                empty_27_reg_886_pp0_iter7_reg <= empty_27_reg_886_pp0_iter6_reg;
                empty_27_reg_886_pp0_iter8_reg <= empty_27_reg_886_pp0_iter7_reg;
                input_pixel_reg_931 <= IBRAM_q0;
                mul110_1_reg_983 <= grp_fu_339_p2;
                mul110_1_reg_983_pp0_iter6_reg <= mul110_1_reg_983;
                mul110_1_reg_983_pp0_iter7_reg <= mul110_1_reg_983_pp0_iter6_reg;
                mul110_1_reg_983_pp0_iter8_reg <= mul110_1_reg_983_pp0_iter7_reg;
                mul110_2_reg_989 <= grp_fu_343_p2;
                mul110_2_reg_989_pp0_iter6_reg <= mul110_2_reg_989;
                mul110_2_reg_989_pp0_iter7_reg <= mul110_2_reg_989_pp0_iter6_reg;
                mul110_2_reg_989_pp0_iter8_reg <= mul110_2_reg_989_pp0_iter7_reg;
                mul110_3_reg_995 <= grp_fu_347_p2;
                mul110_3_reg_995_pp0_iter6_reg <= mul110_3_reg_995;
                mul110_3_reg_995_pp0_iter7_reg <= mul110_3_reg_995_pp0_iter6_reg;
                mul110_3_reg_995_pp0_iter8_reg <= mul110_3_reg_995_pp0_iter7_reg;
                mul110_4_reg_1001 <= grp_fu_351_p2;
                mul110_4_reg_1001_pp0_iter6_reg <= mul110_4_reg_1001;
                mul110_4_reg_1001_pp0_iter7_reg <= mul110_4_reg_1001_pp0_iter6_reg;
                mul110_4_reg_1001_pp0_iter8_reg <= mul110_4_reg_1001_pp0_iter7_reg;
                mul110_5_reg_1007 <= grp_fu_355_p2;
                mul110_5_reg_1007_pp0_iter6_reg <= mul110_5_reg_1007;
                mul110_5_reg_1007_pp0_iter7_reg <= mul110_5_reg_1007_pp0_iter6_reg;
                mul110_5_reg_1007_pp0_iter8_reg <= mul110_5_reg_1007_pp0_iter7_reg;
                mul_reg_977 <= grp_fu_89_p_dout0;
                mul_reg_977_pp0_iter6_reg <= mul_reg_977;
                mul_reg_977_pp0_iter7_reg <= mul_reg_977_pp0_iter6_reg;
                mul_reg_977_pp0_iter8_reg <= mul_reg_977_pp0_iter7_reg;
                select_ln77_reg_850_pp0_iter2_reg <= select_ln77_reg_850;
                select_ln77_reg_850_pp0_iter3_reg <= select_ln77_reg_850_pp0_iter2_reg;
                storemerge7281839399_reg_1058 <= storemerge7281839399_fu_774_p3;
                storemerge738789103_reg_1048 <= storemerge738789103_fu_762_p3;
                storemerge749597_reg_1063 <= storemerge749597_fu_780_p3;
                storemerge75105_reg_1043 <= storemerge75105_fu_756_p3;
                storemerge76_reg_1068 <= storemerge76_fu_786_p3;
                storemerge77798591101_reg_1053 <= storemerge77798591101_fu_768_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                OBRAM_1_load_reg_1018 <= OBRAM_1_q1;
                OBRAM_2_load_reg_1023 <= OBRAM_2_q1;
                OBRAM_3_load_reg_1028 <= OBRAM_3_q1;
                OBRAM_4_load_reg_1033 <= OBRAM_4_q1;
                OBRAM_5_load_reg_1038 <= OBRAM_5_q1;
                OBRAM_load_reg_1013 <= OBRAM_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                col_mid2_reg_845 <= col_mid2_fu_549_p3;
                empty_27_reg_886 <= empty_27_fu_613_p2;
                select_ln77_reg_850 <= select_ln77_fu_557_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    IBRAM_address0 <= zext_ln81_fu_639_p1(10 - 1 downto 0);
    IBRAM_ce0 <= IBRAM_ce0_local;

    IBRAM_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IBRAM_ce0_local <= ap_const_logic_1;
        else 
            IBRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_1_address0 <= OBRAM_1_addr_reg_947_pp0_iter9_reg;
    OBRAM_1_address1 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
    OBRAM_1_ce0 <= OBRAM_1_ce0_local;

    OBRAM_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_1_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_1_ce1 <= OBRAM_1_ce1_local;

    OBRAM_1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            OBRAM_1_ce1_local <= ap_const_logic_1;
        else 
            OBRAM_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_1_d0 <= storemerge7281839399_reg_1058;
    OBRAM_1_we0 <= OBRAM_1_we0_local;

    OBRAM_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_1_we0_local <= ap_const_logic_1;
        else 
            OBRAM_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_2_address0 <= OBRAM_2_addr_reg_953_pp0_iter9_reg;
    OBRAM_2_address1 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
    OBRAM_2_ce0 <= OBRAM_2_ce0_local;

    OBRAM_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_2_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_2_ce1 <= OBRAM_2_ce1_local;

    OBRAM_2_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            OBRAM_2_ce1_local <= ap_const_logic_1;
        else 
            OBRAM_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_2_d0 <= storemerge738789103_reg_1048;
    OBRAM_2_we0 <= OBRAM_2_we0_local;

    OBRAM_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_2_we0_local <= ap_const_logic_1;
        else 
            OBRAM_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_3_address0 <= OBRAM_3_addr_reg_959_pp0_iter9_reg;
    OBRAM_3_address1 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
    OBRAM_3_ce0 <= OBRAM_3_ce0_local;

    OBRAM_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_3_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_3_ce1 <= OBRAM_3_ce1_local;

    OBRAM_3_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            OBRAM_3_ce1_local <= ap_const_logic_1;
        else 
            OBRAM_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_3_d0 <= storemerge749597_reg_1063;
    OBRAM_3_we0 <= OBRAM_3_we0_local;

    OBRAM_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_3_we0_local <= ap_const_logic_1;
        else 
            OBRAM_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_4_address0 <= OBRAM_4_addr_reg_965_pp0_iter9_reg;
    OBRAM_4_address1 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
    OBRAM_4_ce0 <= OBRAM_4_ce0_local;

    OBRAM_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_4_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_4_ce1 <= OBRAM_4_ce1_local;

    OBRAM_4_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            OBRAM_4_ce1_local <= ap_const_logic_1;
        else 
            OBRAM_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_4_d0 <= storemerge75105_reg_1043;
    OBRAM_4_we0 <= OBRAM_4_we0_local;

    OBRAM_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_4_we0_local <= ap_const_logic_1;
        else 
            OBRAM_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_5_address0 <= OBRAM_5_addr_reg_971_pp0_iter9_reg;
    OBRAM_5_address1 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
    OBRAM_5_ce0 <= OBRAM_5_ce0_local;

    OBRAM_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_5_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_5_ce1 <= OBRAM_5_ce1_local;

    OBRAM_5_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            OBRAM_5_ce1_local <= ap_const_logic_1;
        else 
            OBRAM_5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_5_d0 <= storemerge76_reg_1068;
    OBRAM_5_we0 <= OBRAM_5_we0_local;

    OBRAM_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_5_we0_local <= ap_const_logic_1;
        else 
            OBRAM_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_address0 <= OBRAM_addr_reg_941_pp0_iter9_reg;
    OBRAM_address1 <= zext_ln87_fu_746_p1(10 - 1 downto 0);
    OBRAM_ce0 <= OBRAM_ce0_local;

    OBRAM_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_ce0_local <= ap_const_logic_1;
        else 
            OBRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_ce1 <= OBRAM_ce1_local;

    OBRAM_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            OBRAM_ce1_local <= ap_const_logic_1;
        else 
            OBRAM_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OBRAM_d0 <= storemerge77798591101_reg_1053;
    OBRAM_we0 <= OBRAM_we0_local;

    OBRAM_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OBRAM_we0_local <= ap_const_logic_1;
        else 
            OBRAM_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    WBRAM_1_address0 <= p_cast2_fu_597_p1(5 - 1 downto 0);

    WBRAM_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WBRAM_1_ce0_local <= ap_const_logic_1;
        else 
            WBRAM_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    WBRAM_2_address0 <= p_cast2_fu_597_p1(5 - 1 downto 0);

    WBRAM_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WBRAM_2_ce0_local <= ap_const_logic_1;
        else 
            WBRAM_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    WBRAM_3_address0 <= p_cast2_fu_597_p1(5 - 1 downto 0);

    WBRAM_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WBRAM_3_ce0_local <= ap_const_logic_1;
        else 
            WBRAM_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    WBRAM_4_address0 <= p_cast2_fu_597_p1(5 - 1 downto 0);

    WBRAM_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WBRAM_4_ce0_local <= ap_const_logic_1;
        else 
            WBRAM_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    WBRAM_5_address0 <= p_cast2_fu_597_p1(5 - 1 downto 0);

    WBRAM_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WBRAM_5_ce0_local <= ap_const_logic_1;
        else 
            WBRAM_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    WBRAM_address0 <= p_cast2_fu_597_p1(5 - 1 downto 0);

    WBRAM_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WBRAM_ce0_local <= ap_const_logic_1;
        else 
            WBRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln73_1_fu_403_p2 <= std_logic_vector(unsigned(indvar_flatten42_fu_96) + unsigned(ap_const_lv15_1));
    add_ln73_2_fu_577_p2 <= std_logic_vector(unsigned(tmp_fu_569_p3) + unsigned(zext_ln73_fu_565_p1));
    add_ln73_fu_427_p2 <= std_logic_vector(unsigned(row_k_fu_92) + unsigned(ap_const_lv3_1));
    add_ln75_1_fu_664_p2 <= std_logic_vector(unsigned(indvar_flatten19_fu_88) + unsigned(ap_const_lv13_1));
    add_ln75_fu_485_p2 <= std_logic_vector(unsigned(select_ln73_fu_439_p3) + unsigned(ap_const_lv3_1));
    add_ln77_1_fu_650_p2 <= std_logic_vector(unsigned(indvar_flatten6_fu_80) + unsigned(ap_const_lv10_1));
    add_ln77_fu_531_p2 <= std_logic_vector(unsigned(row_mid213_fu_497_p3) + unsigned(ap_const_lv5_1));
    add_ln79_fu_644_p2 <= std_logic_vector(unsigned(col_mid2_fu_549_p3) + unsigned(ap_const_lv5_1));
    add_ln81_fu_625_p2 <= std_logic_vector(unsigned(col_mid2_fu_549_p3) + unsigned(select_ln75_cast_fu_587_p1));
    and_ln73_1_fu_471_p2 <= (xor_ln73_fu_447_p2 and icmp_ln77_fu_465_p2);
    and_ln73_fu_459_p2 <= (xor_ln73_fu_447_p2 and icmp_ln79_fu_453_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln73_fu_397_p2)
    begin
        if (((icmp_ln73_fu_397_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    col_mid2_fu_549_p3 <= 
        ap_const_lv5_0 when (empty_24_fu_543_p2(0) = '1') else 
        col_fu_72;
    empty_23_fu_537_p2 <= (icmp_ln79_mid218_fu_517_p2 or and_ln73_1_fu_471_p2);
    empty_24_fu_543_p2 <= (icmp_ln75_fu_433_p2 or empty_23_fu_537_p2);
    empty_25_fu_591_p2 <= std_logic_vector(unsigned(add_ln73_2_fu_577_p2) + unsigned(select_ln75_cast_fu_587_p1));
    empty_26_fu_607_p2 <= (select_ln75_fu_523_p3 or select_ln73_1_fu_477_p3);
    empty_27_fu_613_p2 <= "1" when (empty_26_fu_607_p2 = ap_const_lv3_0) else "0";
    empty_28_fu_619_p2 <= std_logic_vector(unsigned(select_ln77_fu_557_p3) + unsigned(zext_ln73_1_fu_583_p1));
    empty_29_fu_731_p2 <= std_logic_vector(unsigned(p_shl_fu_713_p3) - unsigned(p_shl12_fu_727_p1));
    empty_30_fu_740_p2 <= std_logic_vector(unsigned(zext_ln79_fu_737_p1) + unsigned(empty_29_fu_731_p2));
    empty_fu_491_p2 <= (icmp_ln75_fu_433_p2 or and_ln73_1_fu_471_p2);
    exitcond_flatten8_not_fu_505_p2 <= (icmp_ln77_fu_465_p2 xor ap_const_lv1_1);
    grp_fu_77_p_ce <= ap_const_logic_1;
    grp_fu_77_p_din0 <= OBRAM_load_reg_1013;
    grp_fu_77_p_din1 <= mul_reg_977;
    grp_fu_77_p_opcode <= ap_const_lv2_0;
    grp_fu_81_p_ce <= ap_const_logic_1;
    grp_fu_81_p_din0 <= OBRAM_1_load_reg_1018;
    grp_fu_81_p_din1 <= mul110_1_reg_983;
    grp_fu_81_p_opcode <= ap_const_lv2_0;
    grp_fu_85_p_ce <= ap_const_logic_1;
    grp_fu_85_p_din0 <= OBRAM_2_load_reg_1023;
    grp_fu_85_p_din1 <= mul110_2_reg_989;
    grp_fu_85_p_opcode <= ap_const_lv2_0;
    grp_fu_89_p_ce <= ap_const_logic_1;
    grp_fu_89_p_din0 <= input_pixel_reg_931;
    grp_fu_89_p_din1 <= WBRAM_load_reg_901;
    icmp_ln73_fu_397_p2 <= "1" when (indvar_flatten42_fu_96 = ap_const_lv15_4C90) else "0";
    icmp_ln75_fu_433_p2 <= "1" when (indvar_flatten19_fu_88 = ap_const_lv13_F50) else "0";
    icmp_ln77_fu_465_p2 <= "1" when (indvar_flatten6_fu_80 = ap_const_lv10_310) else "0";
    icmp_ln79_fu_453_p2 <= "1" when (col_fu_72 = ap_const_lv5_1C) else "0";
    icmp_ln79_mid218_fu_517_p2 <= (not_exitcond_flatten8_mid241_fu_511_p2 and and_ln73_fu_459_p2);
    not_exitcond_flatten8_mid241_fu_511_p2 <= (icmp_ln75_fu_433_p2 or exitcond_flatten8_not_fu_505_p2);
    p_cast2_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_25_fu_591_p2),64));
    p_shl12_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_720_p3),10));
    p_shl_fu_713_p3 <= (select_ln77_reg_850_pp0_iter3_reg & ap_const_lv5_0);
    row_mid213_fu_497_p3 <= 
        ap_const_lv5_0 when (empty_fu_491_p2(0) = '1') else 
        row_fu_76;
    select_ln73_1_fu_477_p3 <= 
        add_ln73_fu_427_p2 when (icmp_ln75_fu_433_p2(0) = '1') else 
        row_k_fu_92;
    select_ln73_fu_439_p3 <= 
        ap_const_lv3_0 when (icmp_ln75_fu_433_p2(0) = '1') else 
        col_k_fu_84;
    select_ln75_1_fu_670_p3 <= 
        ap_const_lv13_1 when (icmp_ln75_fu_433_p2(0) = '1') else 
        add_ln75_1_fu_664_p2;
    select_ln75_cast_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_fu_523_p3),5));
    select_ln75_fu_523_p3 <= 
        add_ln75_fu_485_p2 when (and_ln73_1_fu_471_p2(0) = '1') else 
        select_ln73_fu_439_p3;
    select_ln77_1_fu_656_p3 <= 
        ap_const_lv10_1 when (empty_fu_491_p2(0) = '1') else 
        add_ln77_1_fu_650_p2;
    select_ln77_fu_557_p3 <= 
        add_ln77_fu_531_p2 when (icmp_ln79_mid218_fu_517_p2(0) = '1') else 
        row_mid213_fu_497_p3;
    storemerge7281839399_fu_774_p3 <= 
        mul110_1_reg_983_pp0_iter8_reg when (empty_27_reg_886_pp0_iter8_reg(0) = '1') else 
        grp_fu_81_p_dout0;
    storemerge738789103_fu_762_p3 <= 
        mul110_2_reg_989_pp0_iter8_reg when (empty_27_reg_886_pp0_iter8_reg(0) = '1') else 
        grp_fu_85_p_dout0;
    storemerge749597_fu_780_p3 <= 
        mul110_3_reg_995_pp0_iter8_reg when (empty_27_reg_886_pp0_iter8_reg(0) = '1') else 
        grp_fu_323_p2;
    storemerge75105_fu_756_p3 <= 
        mul110_4_reg_1001_pp0_iter8_reg when (empty_27_reg_886_pp0_iter8_reg(0) = '1') else 
        grp_fu_327_p2;
    storemerge76_fu_786_p3 <= 
        mul110_5_reg_1007_pp0_iter8_reg when (empty_27_reg_886_pp0_iter8_reg(0) = '1') else 
        grp_fu_331_p2;
    storemerge77798591101_fu_768_p3 <= 
        mul_reg_977_pp0_iter8_reg when (empty_27_reg_886_pp0_iter8_reg(0) = '1') else 
        grp_fu_77_p_dout0;
    tmp_2_fu_720_p3 <= (select_ln77_reg_850_pp0_iter3_reg & ap_const_lv2_0);
    tmp_4_fu_631_p3 <= (empty_28_fu_619_p2 & add_ln81_fu_625_p2);
    tmp_fu_569_p3 <= (select_ln73_1_fu_477_p3 & ap_const_lv2_0);
    xor_ln73_fu_447_p2 <= (icmp_ln75_fu_433_p2 xor ap_const_lv1_1);
    zext_ln73_1_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_1_fu_477_p3),5));
    zext_ln73_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_1_fu_477_p3),5));
    zext_ln79_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_mid2_reg_845_pp0_iter3_reg),10));
    zext_ln81_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_631_p3),64));
    zext_ln87_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_fu_740_p2),64));
end behav;
